$(window).on('load', function() {
    navModule.initModule();
});

var navModule = (function() {
    var mainElem = '';
    var signOutElem = '';
    
    function initModule() {
        mainElem = $('#main-holder-elem');
        signOutElem =  mainElem.find('#sign-out');
        
        register_module_events();
    }

    function register_module_events() {
      
        mainElem.find('#nav-holder > li > a').on('click', function(){
          //$('.navbar-collapse').collapse('hide');
          var togglerElem = mainElem.find('.navbar-toggler');
      
          if(togglerElem.css('display') !== 'none') {
            // We reach here if the screen is small and toggler is visible
            togglerElem.click();
          }
      
        });
      }
      
      function goHome() {
        $('#sign-out').modal('hide');
        window.location.href = "/";
      }


    return {
      'initModule': initModule,
      'goHome': goHome
    }
  
  })();
$(window).on('load', function() {
    apiModule.initModule()
});


// All the API calls to the server are invoked through this module
var apiModule = (function() {

    var _this = '';
    var spinnerElem = '';

    function initModule() {
        _this = this;
        spinnerElem = $('.pageSpinnerHolder');
    }

    // @TODO: Need to make this as a common function
    function get_datasets(callbackFunc) {

        // Show the spinner before API call
        spinnerElem.show();
    
        $.ajax({ 
        url: '/datasets', 
        type: 'POST',
        dataType: "json", 
        success: function(response) { 
            // Hide the spinner on API call success or failure
            spinnerElem.hide();
            
            callbackFunc(response);
        },
        error: function(response) {
            // Hide the spinner on API call success or failure
            spinnerElem.hide();
            
            // @TODO: Need to use Bootstrap popover here
            alert("Datasets API failed")
        } 
        }); 
    
    }

    function toggleSpinner(sElem, sFlag) {

        if(sElem == '') {
            // Showing/Hiding full spinner
            if(sFlag) {
                spinnerElem.show();
            } else {
                spinnerElem.hide();
            }
        } else {
            // Showing/Hiding inline spinner
            if(sFlag) {
                sElem.show();
            } else {
                sElem.hide();
            }
        }

    }

    function get_analytics(api_data, callbackFunc, sElem) {
        
        // Show the spinner
        toggleSpinner(sElem, true)
        
        $.ajax({
            url: "/get_analytics",
            type: "POST",
            data: JSON.stringify(api_data),
            dataType: "json",
            success: function (response) {

                // Hide the spinner after API call
                toggleSpinner(sElem, false);

                callbackFunc(response);
            },
            error: function(response) {

                // Hide the spinner after API call
                toggleSpinner(sElem, false);
                
                alert("Analytics API failed")
            }
        });
    }

    function get_settings(api_data, callbackFunc) {

        // Show the spinner before API call
        spinnerElem.show();

        $.ajax({ 
            url: '/get_settings', 
            type: 'POST',
            data: JSON.stringify(api_data),
            dataType: "json", 
            success: function(response) { 
                // Hide the spinner after API call
                spinnerElem.hide();
    
                callbackFunc(response);
            },
            error: function(response) {
    
                // Hide the spinner after API call
                spinnerElem.hide();
    
                alert("GET Settings API failed")
            } 
        }); 
    }

    function save_settings(api_data, callbackFunc) {

        // Show the spinner before API call
        spinnerElem.show();

        $.ajax({ 
            url: '/save_settings', 
            type: 'POST',
            data: JSON.stringify(api_data),
            dataType: "json", 
            success: function(response) { 
    
                // Hide the spinner after API call
                spinnerElem.hide();
                
                callbackFunc(response);
            },
            error: function(response) {
    
                // Hide the spinner after API call
                spinnerElem.hide();
    
                alert("Save Settings API failed");
            } 
        }); 
    }

    function explore_dataset(api_data, callbackFunc) {

        // Show the spinner before API call
        spinnerElem.show();

        $.ajax({ 
            url: '/explore_dataset', 
            type: 'POST',
            data: JSON.stringify(api_data),
            dataType: "json", 
            success: function(response) { 
    
                // Hide the spinner after API call
                spinnerElem.hide();
                
                callbackFunc(response);
            },
            error: function(response) {
    
                // Hide the spinner after API call
                spinnerElem.hide();
    
                alert("Explore dataset API failed");
            } 
        }); 
    }

    function launch_experiment(api_data, callbackFunc, sElem) {
        
        // Show the spinner
        toggleSpinner(sElem, true)
        
        $.ajax({
            url: "/launch_experiment",
            type: "POST",
            data: JSON.stringify(api_data),
            dataType: "json",
            success: function (response) {

                // Hide the spinner after API call
                toggleSpinner(sElem, false);

                callbackFunc(response);
            },
            error: function(response) {

                // Hide the spinner after API call
                toggleSpinner(sElem, false);
                
                alert("Experiments API failed")
            }
        });
    }

    function run_experiment(api_data, callbackFunc, sElem) {
        
        // Show the spinner
        toggleSpinner(sElem, true)
        
        $.ajax({
            url: "/run_experiment",
            type: "POST",
            data: JSON.stringify(api_data),
            dataType: "json",
            success: function (response) {

                // Hide the spinner after API call
                toggleSpinner(sElem, false);

                callbackFunc(response);
            },
            error: function(response) {

                // Hide the spinner after API call
                toggleSpinner(sElem, false);
                
                alert("Experiments API failed")
            }
        });
    }

    function launch_predict(api_data, callbackFunc, sElem) {
        
        // Show the spinner
        toggleSpinner(sElem, true)
        
        $.ajax({
            url: "/launch_predict",
            type: "POST",
            data: JSON.stringify(api_data),
            dataType: "json",
            success: function (response) {

                // Hide the spinner after API call
                toggleSpinner(sElem, false);

                callbackFunc(response);
            },
            error: function(response) {

                // Hide the spinner after API call
                toggleSpinner(sElem, false);
                
                alert("Predict API failed")
            }
        });
    }


    // @TODO: Need to get rid of all these functions and
    // maintain a single api function with metadata passed from outside
    return {
        'initModule': initModule,
        'get_datasets': get_datasets, // API for datasets
        'get_analytics': get_analytics, // API for charts in the Analytics section
        'get_settings': get_settings, // Get settings from Mongo
        'save_settings': save_settings, // Save settings to Mongo
        'explore_dataset': explore_dataset, // Summary statistics of each dataset
        'launch_experiment': launch_experiment, // Initiate ml for current dataset
        'run_experiment': run_experiment,
        'launch_predict': launch_predict
    }
  
})();

var commonModule = (function() {

    var datasets_raw = [];
    var datasets_meta = {};
    
    function set_datasets(ds_raw) {
        datasets_raw = ds_raw;
    }

    function get_datasets() {
        return datasets_raw;
    }

    function render_dropdown(drpData, drpElem) {

        // Erasing the previous content
        drpElem.html("");

        var fieldCount = drpData.length;

        if(fieldCount) {

            for(var i=0; i< fieldCount; i++) {
                var cur_field = drpData[i];

                if(cur_field != "_id") {
                    drpElem.append(getOptionHTML(cur_field));
                }  
            }
        } else {
            // @TODO: Display empty data message
        }

    }

    function getOptionHTML(option_name) {
        return "<option value='"+ option_name +"' >" + option_name + "</option>";
    }

    function get_cat_cols(col_map) {
        
        var cat_cols = []

        for(c in col_map) {

            // Check if the current column type is categorical
            // If yes then push the col
            if(col_map[c] == "Categorical") {
                cat_cols.push(c);
            }
        
        }

        return cat_cols;
    }

    function get_ds_meta() {
        return datasets_meta;
    }

    function set_ds_meta(d_meta) {
        datasets_meta = d_meta;
    }

    // All the functions which are accessible outside
    return {
        'set_datasets': set_datasets, // Raw datasets data
        'get_datasets': get_datasets,
        'set_ds_meta': set_ds_meta, // Formatted datasets data in to Objects
        'get_ds_meta': get_ds_meta, 
        'render_dropdown': render_dropdown, 
        'get_cat_cols': get_cat_cols, // Return the dataset fields of type Categorical
        'getOptionHTML': getOptionHTML
    }
  
})();

var utilsModule = (function() {

    function formatBytes(bytes, decimals = 2) {
        if (bytes === 0) return '0 Bytes';
    
        const k = 1024;
        const dm = decimals < 0 ? 0 : decimals;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
    
        const i = Math.floor(Math.log(bytes) / Math.log(k));
    
        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    }


    return {
        'formatBytes': formatBytes
    }


})();



var tableModule = (function() {



    function get_table_html(tid, tdata, tcaption) {

        var t_html = "";

        t_html = "<div id='table_area_common' class='col-md-12'>";
        t_html += "<div class='table_section mt-2 ml-2 table-responsive' id='table_section_" + tid  + "' >";
        t_html += "<div class='table_section_title mt-2 mr-2'>" + tid + "</div>";
        t_html += "<div class='float-left mt-2 mr-2 mb-2 table_caption_common'>*" +  tcaption + "</div>";
        //t_html += "<div class='table_section_fixed_head mr-2'></div>";
        t_html += "<div class='table_section_holder mr-2'>" + tdata + "</div>";
        t_html += "</div>"; // close table_section
        t_html += "</div>"; // close table_area_common

        return t_html;
    }

    function table_highlight(tid, holderElem, colValue) {

        // Add required classes for styles
        var curSectionElem = holderElem.find("#table_section_" + tid);
        var curSectionTableElem = curSectionElem.find('.dataframe');
        var curSectionTableBodyElem = curSectionTableElem.find('tbody');
        var lastColumnElem = curSectionTableBodyElem.find('tr td:last-child');

        lastColumnElem.each(function(i, lastCol) {
            var curElem = $(lastCol);
            if( curElem.html() == colValue ) {
                curElem.closest('tr').addClass("alert alert-danger");
            } else {
                curElem.closest('tr').addClass("alert alert-success");
            }
        });
    
    }

    function table_beautify(tid, holderElem) {

        // Add required classes for styles
        var curSectionElem = holderElem.find("#table_section_" + tid);
        var curSectionTableElem = curSectionElem.find('.dataframe');
        var curSectionTableHeadElem = curSectionTableElem.find('thead');
        
        // Add required classes
        curSectionTableElem.addClass('table text-center table-hover table-stripped table-sm');
        curSectionTableHeadElem.addClass('thead-dark');
        
        if(curSectionTableElem.height() > 400) {
            // Add scroll to only the table body
            // 400 is the max height we set to each table
            
            // Custom code
            //detachTableHead(curSectionElem);
            
            // Plugin - 1
            //curSectionTableElem.scrollTableBody()

            // Plugin - 2
            curSectionTableElem.floatThead({
                scrollContainer: function($table) {
                    return $table.closest('.table_section_holder');
                }
            });
        }
    }

    // When there is scroll to the table
    // This function detaches the head from table and creates a new table with only head
    // And remove head from original table
    // So that body is only scrollable
    function detachTableHead(holderElem) {
        var tableElem = holderElem.find('.table.dataframe');
        var headElem = tableElem.find('thead');
        var headHTML = headElem.html();

        var fixedHeadElem = holderElem.find('.table_section_fixed_head');
        
        // Erase previous content
        fixedHeadElem.html('');

        var fHeadHTML = "<table class='table table-sm table-dark mb-0'>";
        fHeadHTML += headHTML;
        fHeadHTML += "</table>"

        fixedHeadElem.append(fHeadHTML);

        fixedHeadElem.find("table tr th").each(function(i) {
            $(this).width($(tableElem.find("tr:first th")[i]).width());
        });

        headElem.remove();
    }

    // All the functions which are accessible outside
    return {
        'get_table_html': get_table_html, // HTML for the table component
        'table_beautify': table_beautify, // Beautifying the table through Bootstrap classes
        'table_highlight': table_highlight
    }
  
})();
var chartModule = (function() {

    function get_chart_html(chart_name, showDrpFlag) {

        var chart_id = chart_name + "_chart";

        var chartHTML = "<div class='chart-card-holder col-md-6 p-2 mt-2' id='charts-area-common' >"; //Div 1 open

        if(showDrpFlag) {
            chartHTML += "<div id='pageSpinnerHolder' class='inlineSpinnerHolder'>";
            chartHTML += "<div class='pageSpinner'>";
            chartHTML += "<img src='/static/images/loader.gif' class='pageSpinnerImage'>";
            chartHTML += "<div class='pageSpinnerText'>Loading...</div>";
            chartHTML += "</div></div>";
        }

        chartHTML += "<div class='card card-common' rel='" + chart_name + "' >"; //Div 2 open
        chartHTML += "<div class='card-body'>"; //Div 3 open
        chartHTML += "<div class='chart-card-title'>" + chart_name + "</div>"; //Div 4 open and close

        if(showDrpFlag) {
            chartHTML += "<div class='chart-dropdown-holder mt-5'>";
            chartHTML += "<select class='form-control dsChartDrp' id='ds" + chart_name + "ChartDrp'>";
            chartHTML += "</select></div>";
        }

        chartHTML += "<div class='d-flex justify-content-between'>"; //Div 5 open
        chartHTML += "<div class='chart_holder_common' id='" + chart_id + "' >"; //Div 6 open
        //chartHTML += "<script>" + Plotly.plot(chart_id, chart_data,{}) + "</script>"; // Script open and close
        chartHTML += "</div>"; // Div 6 close
        chartHTML += "</div>"; // Div 5 close
        chartHTML += "</div>"; // Div 3 close
        chartHTML += "<div class='card-footer text-secondary'><div class='chart-card-expand'>"; // Div 7,8 open
        chartHTML += "<i class='fas fa-expand float-right'></i>"; // i open and close 
        chartHTML += "</div></div>"; // Div 7,8 close
        chartHTML += "</div>"; // Div 2 close
        chartHTML += "</div>"; // Div 1 close

        // This is a way to "htmlDecode" your string...    
        //chartHTML = $("<div />").html(chartHTML).html();
        //chartHTML = $.parseHTML(chartHTML) 

        return chartHTML;

    }

    // All the functions which are accessible outside
    return {
        'get_chart_html': get_chart_html, // HTML for the chart component
    }
  
})();
$(window).on('load', function() {
    datasetsModule.initModule()
});


var datasetsModule = (function() {
  
  var _this = '';
  var holderElem = '';
  var datasetTableBodyElem = '';

  function initModule() {
    _this = this;
    holderElem = $('#datasets-holder'); 
    datasetTableBodyElem = holderElem.find("#dataset-table-holder tbody");

    apiModule.get_datasets(render_datasets_table.bind(this))
  }

  // @TODO: Need to do better exception handling here
  function render_datasets_table(res) {

    //var dataset_meta = JSON.parse(res);
    var row_data = res.rows;

    var ds_meta = {};

    // Persist the datasets information to reuse in other pages
    commonModule.set_datasets(row_data);

    // Erasing the previous content
    datasetTableBodyElem.html("");

    var rowCount = row_data.length;

    if(rowCount) {

      for(var i=0; i< rowCount; i++) {

        var cur_ds_name = row_data[i]['name'];
        var cur_ds_columns = row_data[i]['columns']
        var cur_ds_col_type_map = row_data[i]['col_type_map']

        ds_meta[cur_ds_name] = {
            'columns': [],
            'col_type_map': {}
        }

        // Persisting the dataset information
        ds_meta[cur_ds_name]['columns'] = cur_ds_columns;
        ds_meta[cur_ds_name]['col_type_map'] = cur_ds_col_type_map;

        // Add a separate row for each dataset in the response
        datasetTableBodyElem.append(getRowHTML(i, row_data[i]));
      }

      // Persist the datasets meta information to reuse in other pages
      commonModule.set_ds_meta(ds_meta);

    } else {
      // @TODO: Display empty data message
    }

    register_table_events();

  }

  function getRowHTML(row_index, row_obj) {
    // Format dataset size on UI
    var cur_size = utilsModule.formatBytes(row_obj['size'], 2);

    var rowHTML = "<tr><th>";
    rowHTML += (row_index + 1) + "</th><td>";
    rowHTML += row_obj['name'] + "</td><td>";
    rowHTML += cur_size + "</td><td>";
    rowHTML += row_obj['col_count'] + "</td><td>";
    rowHTML += row_obj['row_count'] + "</td></tr>";

    return rowHTML;
  }

  function register_table_events() {

      // @TODO: Need to close the context menu when clicked outside

      // Events for context menu on the data table
      $('#dataset-table-holder td').on('contextmenu', function(e) {
      
        var top = e.pageY - 10;
        var left = e.pageX - 10;
        
        $("#context-menu").css({
          display: "block",
          top: top,
          left: left
        });
        
        return false;
        
      }).on("click", function() {
      
        $("#context-menu").hide();
        
      });
      
      $("#context-menu a").on("click", function() {
        $(this).parent().hide();
      });

  }

  return {
    'initModule': initModule
  }

})();























$(window).on('load', function() {
    exploreModule.initModule();
});

var exploreModule = (function() {

    var _this = '';
    var eElem = '';
    var drpElem = '';

    var caption_meta = {
        "numeric": "Summary statistics of all the numeric fields of the data set",
        "categorical": "Summary statistics of all the categorical fields of the data set",
        "properties": "Structure of current dataset"
    }

    var summary_order = ["properties", "numeric", "categorical"];

    function initModule() {

        _this = this;
        eElem = $("#explore-area");
        drpElem = eElem.find("#eDSList");
        btnElem = eElem.find("#explore_ds");
        eSElem = eElem.find("#explore_ds_summary");

        register_module_events();
    }

    function renderModule() {
        // Only for the first time load
        if(drpElem.html() == '') {
            render_datasets();
        }
    }

    function render_datasets() {

        var row_data = commonModule.get_datasets();

        // Erasing the previous content
        drpElem.html("");

        var rowCount = row_data.length;

        if(rowCount) {

            for(var i=0; i< rowCount; i++) {

                ds_name = row_data[i]['name'];
                
                // Add a separate option in the dropdown for each dataset in the response
                drpElem.append(commonModule.getOptionHTML(ds_name));
            }
        } else {
            // @TODO: Display empty data message
        }
    }


    function register_module_events() {

        // Dataset explore button click
        btnElem.click(function(e) {

            var api_data = {
                'd_name': drpElem.val()
            }  

            apiModule.explore_dataset(api_data, dataset_summary.bind(this));

        });

    }


    function dataset_summary(ds_summary) {

        var eSElem = eElem.find("#explore_ds_summary");
        // Clearing the previous content
        eSElem.html('');

        var nativeESElem = document.getElementById('explore_ds_summary');

        for(i in summary_order) {
            t = summary_order[i];

            var t_html = tableModule.get_table_html(t, ds_summary[t], caption_meta[t]);
            nativeESElem.insertAdjacentHTML('beforeend', t_html );

            tableModule.table_beautify(t, eSElem);
        }

        //eSElem.find('.dataframe.table').scrollTableBody();
    }

    return {
        'initModule': initModule,
        'renderModule': renderModule
    }
  
})();
$(window).on('load', function() {
    analyticsModule.initModule();
});

var analyticsModule = (function() {

    var _this = '';
    var aElem = '';
    var datasetDrpElem = '';
    var drpElem = '';

    var charts_meta = {};

    // This object is to show or hide the drop down for a particular chart
    var chart_drp_meta = {
        'heatmap': false,
        'histogram': true,
        'box': true,
        'field': false,
        'pie': true,
        'feature': false,
        'lines': false
    }

    var charts_list = ['pie', 'box', 'histogram', 'heatmap']; //, 'lines']; // , 'field', 'feature'];
    
    function initModule() {

        _this = this;
        aElem = $("#analytics-area");
        datasetDrpElem = aElem.find("#dsList");
        drpElem = aElem.find("#dsLabel");

        register_module_events();
    }


    function renderModule() {

        // @TODO: Need to cover the case of new datasets being uploaded 
        // After initial page load
        if($.isEmptyObject(charts_meta)) {
            //Get the current datasets
            render_datasets();
        }
        
    }

    function render_datasets() {

        var row_data = commonModule.get_datasets();

        // Erasing the previous content
        datasetDrpElem.html("");

        var rowCount = row_data.length;

        if(rowCount) {

            // Initializing target dropdown
            
            // If the datasets exist then get the fields of the first dataset to display
            // Target column values
            commonModule.render_dropdown(commonModule.get_cat_cols(row_data[0]['col_type_map']), drpElem);

            for(var i=0; i< rowCount; i++) {

                ds_name = row_data[i]['name'];
                
                // Add a separate option in the dropdown for each dataset in the response
                datasetDrpElem.append(commonModule.getOptionHTML(ds_name));
            }


        } else {
            // @TODO: Display empty data message
        }
    }

    

    function register_module_events() {

        // Datasets dropdown change event
        // Here for every dataset we show only categorical variables
        aElem.find('#dsList').on('change', function() {
            var curDS = $(this).val();
            var datasets_meta = commonModule.get_ds_meta();
            var curDSColMap = datasets_meta[curDS]['col_type_map'];
            var drpElem = aElem.find("#dsLabel");

            commonModule.render_dropdown(commonModule.get_cat_cols(curDSColMap), drpElem);
        });

        // Dataset analyze button click
        aElem.find('#analyze_ds').click(function(e) {

            var api_data = {
                'charts_list':  charts_list,//aElem.find('#chart_select').val(),
                'd_name': aElem.find('#dsList').val(),
                'label_col': aElem.find('#dsLabel').val()
            }  

            apiModule.get_analytics(api_data, render_charts.bind(this), '');

        });

    }

    // @TODO: Need to do exception handling properly
    function render_charts(charts_data) {

        var chartHolderElem = $("#charts_section_holder");
        var nativeHElem = document.getElementById('charts_section_holder');
        var curDS = $("#dsList").val();
        //var curLabel = $("#dsLabel").val();
        //var curDSCols = datasets_meta[curDS]['columns'];
        
        var datasets_meta = commonModule.get_ds_meta();
        var curDSColTypes = datasets_meta[curDS]['col_type_map'];
        
        charts_meta = {};

        // Erasing the previous data
        chartHolderElem.html("");

        for(chart in charts_data) {
            
            var chartHTML = chartModule.get_chart_html(chart, chart_drp_meta[chart]);

            nativeHElem.insertAdjacentHTML('beforeend', chartHTML );
            //charts_section_holder.append(chartHTML);
            //console.log(charts_data[chart]);
            charts_meta[chart] = charts_data[chart];
            if(chart == 'heatmap') {
                var chart_layout = {
                    font: {size: 6}
                }

                Plotly.newPlot( chart + '_chart', JSON.parse(charts_meta[chart]['data']), chart_layout );
            } else {
                Plotly.newPlot( chart + '_chart', JSON.parse(charts_meta[chart]['data']) );
            }
            

            // Render the dropdown for the chart
            if(chart_drp_meta[chart]) {
                var curChartDrpElem = chartHolderElem.find("#ds" + chart + "ChartDrp");
                var curChartCols = [];
                var curChartTypes = charts_meta[chart]['chart_types'];
                
                for(col in curDSColTypes) {
                    if(curChartTypes.includes(curDSColTypes[col])) {
                        curChartCols.push(col);
                    }
                }

                commonModule.render_dropdown(curChartCols, curChartDrpElem);
                curChartDrpElem.val(charts_meta[chart]['label_col']);
            }
        }

        register_chart_events();

    }

    function register_chart_events() {
        var aElem = $("#analytics-area");

        aElem.find(".chart-card-expand").click(function(e) {
            
            e.preventDefault();

            var cardHolderElem = $(this).closest('.card.card-common');
            var chartTitle = cardHolderElem.find('.chart-card-title').text();
            //var chartType = cardHolderElem.prop('rel');
            var chartData = JSON.parse(charts_meta[chartTitle]['data']);
            var maxModalHolder = aElem.find('#analytics-chart-max');

            
            var modelDims = {
                'w': maxModalHolder.width(),
                'h': maxModalHolder.height()
            }

            // Setting the model window dimensions based on available screen height and width
            aElem.find("#max-chart-holder").css({
                'width': modelDims['w'] * 0.75, // Only 80% of available width
                'height': modelDims['h'] 
            });

            //Display the chart on enlarged window
            maxModalHolder.find('.modal-title').html(chartTitle);


            Plotly.newPlot( 'max-chart-holder', chartData );
            //maxModalHolder.find('.max-chart-image').prop('src', chartIMGSource);
            maxModalHolder.modal('show');

        });


        aElem.find('.dsChartDrp').on('change', function() {
            var curElem = $(this);
            var curField = curElem.val();

            // Get the current chart name
            var curChart = curElem.closest('.card-common').attr('rel');

            var spinnerElem = curElem.closest('.chart-card-holder').find('.inlineSpinnerHolder');

            var api_data = {
                'charts_list': [curChart],
                'd_name': aElem.find('#dsList').val(),
                'label_col': curField
            }  


            apiModule.get_analytics(api_data, chart_rerender.bind(this), spinnerElem);

        });
    }

    function chart_rerender(charts_data) {

        // Rerender the current chart based on the selected field
        for(chart in charts_data) {
            charts_meta[chart] = charts_data[chart]; //JSON.parse(charts_data[chart]);
            Plotly.newPlot( chart + '_chart', JSON.parse(charts_meta[chart]['data']) );
        }
    }
    
    
    return {
        'initModule': initModule,
        'renderModule': renderModule
    }
  
})();


                                  



                                  
                                  
$(window).on('load', function() {
    experimentsModule.initModule();
});

var experimentsModule = (function() {

    var _this = '';
    
    // Holder elem for experiments section
    var expElem = '';
    
    // Datasets dropdown
    var expDSElem = '';
    
    // Target label dropdown
    var expLabelElem = '';

    // Button for initiating experiment
    var expBtnElem = '';

    var expRunBtnElem = '';

    // Experiment results holder
    var expResultsElem = '';

    // Importance - for finding feature importance
    // Metrics - for finding the matrics for regular machine learning algorithms
    var exp_list = ['importance', 'metrics']; // , 'field', 'feature'];

    var run_exp_list = ['accuracy', 'loss', 'history', 'dl_metrics'];

    var default_ds = ['Id_Trainset'];
    
    var run_exp_map = {
        'history': 'table', 
        'accuracy': 'chart', 
        'loss': 'chart',
        'dl_metrics': 'table'
    }

    var caption_meta = {
        "importance": "Features sorted by their importance",
        "metrics": "Metric values sorted by accuracy",
        "history": "Results of model training",
        "dl_metrics": "Metrics of the model"
    }

    var ml_alogirithm_map = {
        "SVM": "Support Vector Machines", 
        "PCA": "Principle Component Analysis", 
        "DT": "Decision Trees", 
        "RF": "Random Forest", 
        "NB": "Naive Bayes", 
        "SGD": "Stocastic Gradient Descent", 
        "XB": "XGBoost", 
        "LR": "Logistic Regression", 
        "KNN": "K Nearest Neighbours"
    }
    
    function initModule() {

        _this = this;
        expElem = $("#experiments-area");
        expDSElem = expElem.find("#expDSList");
        expLabelElem = expElem.find("#expDSLabel");

        expBtnElem = expElem.find("#expDSLaunch");
        expRunBtnElem = expElem.find("#expDSRun");

        expResultsElem = expElem.find("#expResultsHolder");
        expSplit = expElem.find("#expSplit");

        register_module_events();
    }


    function renderModule() {

        //Get the current datasets
        render_datasets();
        
    }

    function render_datasets() {

        var row_data = commonModule.get_datasets();

        // Erasing the previous content
        expDSElem.html("");

        var rowCount = row_data.length;

        if(rowCount) {

            for(var i=0; i< rowCount; i++) {

                var cur_ds_name = row_data[i]['name'];
                
                // Add a separate option in the dropdown for each dataset in the response
                expDSElem.append(commonModule.getOptionHTML(cur_ds_name));
                
            }

        } else {

            // @TODO: Display empty data message
        
        }

        // Set default datasets
        // @TODO: Need to remove this after the demo
        expDSElem.val(default_ds).trigger('change').prop('disabled', true);
        expLabelElem.prop('disabled', true);
    }

    function register_module_events() {

        // Datasets dropdown change event
        // Here for every dataset we show only categorical variables
        expDSElem.on('change', function() {
            var curDS = $(this).val();
            var datasets_meta = commonModule.get_ds_meta();
            var curDSColMap = datasets_meta[curDS]['col_type_map'];
            
            commonModule.render_dropdown(commonModule.get_cat_cols(curDSColMap), expLabelElem);
        });

        // Experiment button click
        expBtnElem.click(function(e) {

            var api_data = {
                'e_list':  exp_list,//aElem.find('#chart_select').val(),
                'd_name': expDSElem.val(),
                'label_col': expLabelElem.val(),
                'd_split': parseFloat(expSplit.val())
            }  

            apiModule.launch_experiment(api_data, render_experiment.bind(this), '');

        });

        // Experiment run button click
        expRunBtnElem.click(function(e) {

            var api_data = {
                'e_list':  exp_list,//aElem.find('#chart_select').val(),
                'd_name': expDSElem.val(),
                'label_col': expLabelElem.val(),
                'd_split': parseFloat(expSplit.val())
            }  

            apiModule.run_experiment(api_data, render_experiment_train_results.bind(this), '');

        });

    }

    // @TODO: Need to do exception handling properly
    function render_experiment(e_data) {

        var expResultsElem = expElem.find("#expResultsHolder");
        
        // Clearing the previous content
        expResultsElem.html('');

        var nativeESElem = document.getElementById('expResultsHolder');

        for(i in exp_list) {
            t = exp_list[i];

            var t_html = tableModule.get_table_html(t, e_data[t], caption_meta[t]);
            nativeESElem.insertAdjacentHTML('beforeend', t_html );

            tableModule.table_beautify(t, expResultsElem);
        }

    }

    function render_experiment_train_results(er_data) {
        
        var expResultsElem = expElem.find("#expResultsHolder");
        
        // Clearing the previous content
        expResultsElem.html('');

        var nativeESElem = document.getElementById('expResultsHolder');

        for(i in run_exp_list) {
            t = run_exp_list[i];
            var cur_type = run_exp_map[t];

            if(cur_type == "table") {

                var t_html = tableModule.get_table_html(t, er_data[t], caption_meta[t]);
                nativeESElem.insertAdjacentHTML('beforeend', t_html );

                tableModule.table_beautify(t, expResultsElem);
            
            } else {

                var chartHTML = chartModule.get_chart_html(t, false);
                // Add chart HTML
                nativeESElem.insertAdjacentHTML('beforeend', chartHTML );
                
                // Plot the chart using Plotly
                Plotly.newPlot( t + '_chart', JSON.parse(er_data[t]['data']) );

            }
            
        }

    }
    
    return {
        'initModule': initModule,
        'renderModule': renderModule
    }
  
})();


                                  



                                  
                                  
$(window).on('load', function() {
    predictModule.initModule();
});

var predictModule = (function() {

    var _this = '';
    
    // Holder elem for experiments section
    var predElem = '';
    
    // Datasets dropdown for selecting train set
    var predTrainDSList = '';
    
    // Datasets dropdown for selecting test set
    var predTestDSList = '';

    // Button for initiating prediction
    var predDSLaunch = '';

    // Prediction results holder
    var predResultsHolder = '';

    var pred_list = ['prediction', 'prediction summary']; //, 'loss', 'history', 'dl_metrics'];

    var pred_map = {
        'prediction': 'table',
        'prediction summary': 'chart'
    }

    var caption_meta = {
        'prediction': 'Predictions of DL model on new data',
        'prediction summary': 'Summary of all the predictions'
    }

    var default_train_ds = ['Id_Trainset'];
    var default_test_ds = ['Id_Testset'];
    
    function initModule() {

        _this = this;

        predElem = $("#predict-area");

        predTrainDSList = predElem.find("#predTrainDSList");
        predTestDSList = predElem.find("#predTestDSList");

        predDSLaunch = predElem.find("#predDSLaunch");

        predResultsHolder = predElem.find("#predResultsHolder");
        
        register_module_events();
    }


    function renderModule() {

        if(predTrainDSList.html() == '') {
            //Get the datasets in current page only for the first time
            render_datasets();
        }
        
        
    }

    function render_datasets() {

        var row_data = commonModule.get_datasets();

        // Erasing the previous content
        predTrainDSList.html("");
        predTestDSList.html("");

        var rowCount = row_data.length;

        if(rowCount) {

            for(var i=0; i< rowCount; i++) {

                var cur_ds_name = row_data[i]['name'];
                
                // Add a separate option in the dropdown for each dataset in the response
                predTrainDSList.append(commonModule.getOptionHTML(cur_ds_name));
                predTestDSList.append(commonModule.getOptionHTML(cur_ds_name));
            }

        } else {
            // @TODO: Display empty data message
        }

        // Set default datasets
        // @TODO: Need to remove this after the demo
        predTrainDSList.val(default_train_ds).prop('disabled', true);
        predTestDSList.val(default_test_ds).prop('disabled', true);
        
    }

    function register_module_events() {

        // Datasets dropdown change event
        // Here for every dataset we show only categorical variables
        predTrainDSList.on('change', function() {
            var curDS = $(this).val();
            var datasets_meta = commonModule.get_ds_meta();
            //var curDSColMap = datasets_meta[curDS]['col_type_map'];
            
            //commonModule.render_dropdown(commonModule.get_cat_cols(curDSColMap), expLabelElem);
        });

        // Experiment button click
        predDSLaunch.click(function(e) {

            var api_data = {
                'dtrain_name': predTrainDSList.val(),
                'dtest_name': predTestDSList.val(),
                'pred_list': pred_list
            }  

            apiModule.launch_predict(api_data, render_predict_results.bind(this), '');

        });
        
    }

    function render_predict_results(p_data) {
        
        predResultsHolder = predElem.find("#predResultsHolder");
        
        // Clearing the previous content
        predResultsHolder.html('');

        var nativeESElem = document.getElementById('predResultsHolder');

        for(i in pred_list) {

            t = pred_list[i];
            var cur_type = pred_map[t];

            if(cur_type == "table") {

                var t_html = tableModule.get_table_html(t, p_data[t], caption_meta[t]);
                nativeESElem.insertAdjacentHTML('beforeend', t_html );

                tableModule.table_beautify(t, predResultsHolder);

                tableModule.table_highlight(t, predResultsHolder, "Anomaly");
            
            } else {
                
                var chartHTML = chartModule.get_chart_html(t, false);
                
                // Add chart HTML
                nativeESElem.insertAdjacentHTML('beforeend', chartHTML );
                
                // Plot the chart using Plotly
                Plotly.newPlot( t + '_chart', JSON.parse(p_data[t]['data']) );

            }
            
        }

    }
    
    return {
        'initModule': initModule,
        'renderModule': renderModule
    }
  
})();


                                  



                                  
                                  
$(window).on('load', function() {
    settingsModule.initModule()
});

var settingsModule = (function() {

    var sHolderElem = '';

    // For saving the settings to Mongo DB
    var settings_obj = {}

    // Differentiating the type of elements in the form
    var setting_type = {
        "checkbox": ['use_gpu', 'normalize', 'standardize', 'save_log', 'export_db', 
                    'export_csv', 'dataset_view', 'history_view', 
                    'verbose', 'save_best_model', 'early_stopping', 'batch_normalization'],
        "input": ['epochs_number', 'learning_rate', 'train_batch_size', 'test_batch_size', 'dropout'], //'t', 'n_hidden'
        "select": ['gpu_type', 'train_algorithm', 'neural_model', 'encoding', 'imputation', 'activation', 'regularization', 'hyper'] // 'input_columns', 'output_column', 'model_type',
    }

    // Setting name to DOM ID mapping
    var db_map = {
        "use_gpu": "cUseGPU",
        "gpu_type": "cGPUType",
        //"t": "cT",
        "normalize": "cN",
        "standardize": "cS",
        "encoding": "cEncoding",
        "imputation": "cImputation",
        "input_columns": "cInputCols",
        "output_column": "cOutputCols",
        "save_log": "cSaveLog",
        "export_db": "cSaveDB",
        "export_csv": "cSaveCSV",
        "dataset_view": "cDatasetV",
        "history_view": "cHistoryV",
        "verbose": "cVerbose",
        "model_type": "cModelType",
        "n_hidden": "cHC",
        "train_algorithm": "cTA",
        "activation": "cActivation",
        "epochs_number": "cEpochsCount",
        "learning_rate": "cLR",
        "save_best_model": "cSBM",
        "early_stopping": "cES",
        "train_batch_size": "cTrainBS",
        "test_batch_size": "cTestBS",
        "neural_model": "cNeuralModel",
        "regularization": "cRegularization",
        "hyper": "cHyper",
        "batch_normalization": "cBN",
        "dropout": "cDropout"
    }

    function initModule() {

        sHolderElem = $("#settings-area");

        register_settings_events();
    }

    function register_settings_events() {

        // @TODO: Need to do this more efficiently
        sHolderElem.find('.card-header').click(function(e) {
            
            sHolderElem.find('.cplus').removeClass('d-none').addClass('d-block');
            sHolderElem.find('.cminus').removeClass('d-block').addClass('d-none');
    
            $(this).find('.commons').removeClass('d-block').addClass('d-none');
    
            if(!$(this).hasClass('collapsed')) {
                $(this).find('.cplus').addClass('d-block');
            } else {
                $(this).find('.cminus').addClass('d-block');
            }
        });
    }

    function renderModule() {

        //Render only for the first time load
        if($.isEmptyObject(settings_obj)) {
            //Get the current settings
            get_global_settings();
        }
    }

    function get_global_settings() {

        var api_data = {
            'user_name': "fabio",
            'user_id': 111
        }
    
        apiModule.get_settings(api_data, fill_ad_settings.bind(this))
    }
    

    function fill_ad_settings(response) {
        var ad_setting = response['sconfig'];
        settings_obj = ad_setting;
    
        //Set the settings as per the values from API
        settings_binder(ad_setting, true);
    }
    
    
    
    // if sflag is true then set the settings from API
    // if sflag is false then get the settings to be saved in DB via API
    function settings_binder(s_config, sflag) {
    
        for(key in setting_type) {
    
            var type_elems = setting_type[key];
    
            if(key == "checkbox") {
                type_elems.forEach(function(elem) { 
    
                    //console.log("Checkbox: " + elem);
                    var domID = db_map[elem];
                    if(sflag) {
                        sHolderElem.find("#" + domID).prop('checked', s_config[elem]);
                    } else {
                        s_config[elem] = sHolderElem.find("#" + domID).prop('checked');
                    }
                    
                });
    
            } else if(key == "input" || key == "select") {
    
                type_elems.forEach(function(elem) { 
    
                    //console.log("Input or Select element: " + elem);
                    var domID = db_map[elem];
                    if(sflag) {
                        sHolderElem.find("#" + domID).val(s_config[elem]);
                    } else {
                        if(key == "input") {
                            // Avoiding saving of strings
                            s_config[elem] = Number(sHolderElem.find("#" + domID).val());
                        } else {
                            s_config[elem] = sHolderElem.find("#" + domID).val();
                        }
                        
                    }
    
                });
    
            } else {
                // Setting remaning elements comes here... 
            }
    
        }
    
        if(!sflag) {
            return s_config;
        }
    }
    
    function save_settings() {
    
        //Get the settings as per the user selections
        var settings = settings_binder(settings_obj, false);
    
        var api_data = {
            'user_name': "fabio",
            'user_id': 111,
            's_config': settings 
        }

        apiModule.save_settings(api_data, show_save_success.bind(this))
    
    }
    
    function show_save_success(res) {
        //alert("Settings are saved successfully");
    }
    
    return {
        'initModule': initModule,
        'renderModule': renderModule,
        'save_settings': save_settings
    }
    
})();




